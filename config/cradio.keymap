/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/ext_power.h>
#include <dt-bindings/zmk/outputs.h>

#define BAS 0
#define RUS 1
#define EXT 2
#define SYM 3
#define FUN 4

/ {
        behaviors {
                        hm: homerow_mods {
            compatible = "zmk,behavior-hold-tap";
            label = "homerow mods";
            #binding-cells = <2>;
            tapping_term_ms = <200>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;
        };

                td_caps: td_caps {
                        compatible = "zmk,behavior-tap-dance";
                        label = "Caps Word / Caps Lock";
                        #binding-cells = <0>;
                        tapping-term-ms = <200>;
                        bindings = <&caps_word>, <&kp CAPS>;
                };

                ru_ee: ru_ee {
                        compatible = "zmk,behavior-tap-dance";
                        label = "Russian Е / Ё";
                        #binding-cells = <0>;
                        tapping-term-ms = <200>;
                        bindings = <&kp T>, <&kp BSLH>;
                };

                ru_bb: ru_bb {
                        compatible = "zmk,behavior-tap-dance";
                        label = "Russian Ь / Ъ";
                        #binding-cells = <0>;
                        tapping-term-ms = <200>;
                        bindings = <&kp M>, <&kp RBKT>, <&kp KP_COMMA>;
                };

                ru_sh: ru_sh {
                        compatible = "zmk,behavior-tap-dance";
                        label = "Russian Ш / Щ";
                        #binding-cells = <0>;
                        tapping-term-ms = <200>;
                        bindings = <&kp I>, <&kp O>, <&kp KP_DOT>;
                };
        };

        macros {
                lang_switch: lang_switch {
                        label = "Language toggle";
                        compatible = "zmk,behavior-macro";
                        #binding-cells = <0>;
                        wait-ms = <40>;
                        tap-ms = <40>;
                        bindings
                                = <&macro_press &kp LGUI>
                                , <&tog RUS>
                                , <&macro_tap &kp SPACE>
                                , <&macro_release &kp LGUI>
                                ;
                };
        };

        conditional_layers {
                compatible = "zmk,conditional-layers";
                tri_layer {
                        if-layers = <2 3>;
                        then-layer = <4>;
                };
        };

        keymap {
                compatible = "zmk,keymap";

                default_layer {
                        bindings = <
   &kp Q &kp W &kp F &kp P &kp B    &kp J &kp L  &kp U     &kp Y   &kp SQT
   &kp A &kp R &kp S &kp T &kp G    &kp M &kp N  &kp E     &kp I   &kp O
   &kp Z &kp X &kp C &kp D &kp V    &kp K &kp H  &kp COMMA &kp DOT &kp FSLH
               &mo EXT &kp LSHFT    &kp SPACE &mo SYM
                        >;
                };

                russian_layer {
                        bindings = <
   &kp Z &kp SEMI &kp A &kp G &kp COMMA     &kp Q &kp K &kp E  &kp S  &kp SQT
   &kp F &kp H    &kp C &kp N &kp U         &kp V &kp Y &ru_ee &kp B  &kp J
   &kp P &kp LBKT &kp W &kp L &kp D         &kp R &kp X &ru_bb &ru_sh &kp DOT
                        &trans &trans       &trans &trans
                        >;
                };


                ext_layer {
                        bindings = <
   &gresc    &kp LG(LS(LBKT)) &kp LG(F) &kp LG(LS(RBKT)) &kp LG(B)       &kp PG_UP    &kp HOME &kp UP   &kp END   &td_caps
   &sk LALT  &sk LGUI         &sk LSHFT &sk LCTRL        &lang_switch    &kp PG_DN    &kp LEFT &kp DOWN &kp RIGHT &kp DEL
   &kp LG(Z) &kp LG(X)        &kp LG(C) &kp TAB          &kp LG(V)       &kp LA(BSPC) &kp BSPC &none    &none     &none
                                      &trans           &trans          &kp RET      &trans
                        >;
                };

                sym_layer {
                        bindings = <
   &kp N1  &kp N2    &kp N3   &kp N4    &kp N5       &kp N6    &kp N7    &kp N8    &kp N9   &kp N0
   &kp LT  &kp PRCNT &kp LBRC &kp LPAR  &kp LBKT     &kp EQUAL &kp UNDER &kp COLON &kp PIPE &kp GRAVE
   &kp GT  &kp AMPS  &kp RBRC &kp RPAR  &kp RBKT     &kp PLUS  &kp MINUS &kp SEMI  &kp BSLH &kp TILDE
                                    &trans &trans   &trans &trans
                        >;
                };

                fun_layer {
                        bindings = <
   &none &kp C_PREV   &kp C_PP   &kp C_NEXT   &kp C_BRI_UP    &none &none &none &none &none
   &none &kp C_VOL_DN &kp C_MUTE &kp C_VOL_UP &kp C_BRI_DN    &none &none &none &none &none
   &none &none        &none      &none        &none           &none &none &none &none &none
                     &none &none    &none &none
                        >;
                };
        };
};